# Day 3

## Puzzle 1

```elixir
input = """
00100
11110
10110
10111
10101
01111
00111
11100
10000
11001
00010
01010
"""

gamma_rate =
  input
  |> String.splitter("\n", trim: true)
  |> Stream.map(&String.split(&1, "", trim: true))
  |> Stream.zip()
  |> Stream.map(&Tuple.to_list/1)
  |> Stream.map(fn list -> Enum.frequencies(list) end)
  |> Stream.map(fn freq -> if(freq["0"] > freq["1"], do: "0", else: "1") end)
  |> Enum.to_list()

epsilon_rate =
  gamma_rate
  |> Enum.map(fn bit ->
    case bit do
      "0" -> "1"
      "1" -> "0"
    end
  end)

gamma =
  gamma_rate
  |> Enum.join()
  |> String.to_integer(2)
  |> IO.inspect(label: "GAMMA")

epsilon =
  epsilon_rate
  |> Enum.join()
  |> String.to_integer(2)
  |> IO.inspect(label: "EPSILON")

gamma * epsilon
```

## Puzzle 2

```elixir
input = """
00100
11110
10110
10111
10101
01111
00111
11100
10000
11001
00010
01010
"""

list_numbers =
  input
  |> String.splitter("\n", trim: true)
  |> Stream.map(&String.split(&1, "", trim: true))
  |> Enum.to_list()
```

```elixir
transposed_list =
  list_numbers
  |> Enum.zip()
  |> Enum.map(&Tuple.to_list/1)
  |> IO.inspect(label: "TRANSPOSE")

freq =
  transposed_list
  |> Enum.at(0)
  |> Enum.frequencies()
  |> IO.inspect(label: "FREQ")

filter_char = if freq["0"] > freq["1"], do: "0", else: "1"
```
